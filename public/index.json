[{"categories":null,"content":"概述 XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。 ","date":"2023-09-21","objectID":"/2023/3815816a4666463c/:1:0","tags":null,"title":"在Linux系统上部署xll Job分布式任务调度平台","uri":"/2023/3815816a4666463c/"},{"categories":null,"content":"下载 文档地址 中文文档 English Documentation 源码仓库地址 源码仓库地址 Release Download https://github.com/xuxueli/xxl-job Download http://gitee.com/xuxueli0323/xxl-job Download ","date":"2023-09-21","objectID":"/2023/3815816a4666463c/:2:0","tags":null,"title":"在Linux系统上部署xll Job分布式任务调度平台","uri":"/2023/3815816a4666463c/"},{"categories":null,"content":"安装环境 Maven3+ Jdk1.8+ Mysql5.7+ ","date":"2023-09-21","objectID":"/2023/3815816a4666463c/:3:0","tags":null,"title":"在Linux系统上部署xll Job分布式任务调度平台","uri":"/2023/3815816a4666463c/"},{"categories":null,"content":"安装 Maven yum -y install maven mvn -v ","date":"2023-09-21","objectID":"/2023/3815816a4666463c/:3:1","tags":null,"title":"在Linux系统上部署xll Job分布式任务调度平台","uri":"/2023/3815816a4666463c/"},{"categories":null,"content":"安装 JDK 1.8+ yum install java-1.8.0-openjdk* -y java -version ","date":"2023-09-21","objectID":"/2023/3815816a4666463c/:3:2","tags":null,"title":"在Linux系统上部署xll Job分布式任务调度平台","uri":"/2023/3815816a4666463c/"},{"categories":null,"content":"安装部署 ","date":"2023-09-21","objectID":"/2023/3815816a4666463c/:4:0","tags":null,"title":"在Linux系统上部署xll Job分布式任务调度平台","uri":"/2023/3815816a4666463c/"},{"categories":null,"content":"导入数据 将/xxl-job/doc/db/tables_xxl_job.sql导入MySQL数据库： mysql -uroot -p \u003c tables_xxl_job.sql ","date":"2023-09-21","objectID":"/2023/3815816a4666463c/:4:1","tags":null,"title":"在Linux系统上部署xll Job分布式任务调度平台","uri":"/2023/3815816a4666463c/"},{"categories":null,"content":"修改配置文件 修改admin配置： vim ./xxl-job/xxl-job-admin/src/main/resources/application.properties 可修改服务端口： server.port=8849 修改数据库连接信息： ### xxl-job, datasource spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true\u0026characterEncoding=UTF-8\u0026autoReconnect=true\u0026serverTimezone=Asia/Shanghai spring.datasource.username=root spring.datasource.password=xxxxxx spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver 修改执行器配置： vim ./xxl-job/xxl-job-executor-samples/xxl-job-executor-sample-springboot/src/main/resources/application.properties 可修改服务端口 server.port=8848 配置admin链接： ### xxl-job admin address list, such as \"http://address\" or \"http://address01,http://address02\" xxl.job.admin.addresses=http://127.0.0.1:8849/xxl-job-admin ","date":"2023-09-21","objectID":"/2023/3815816a4666463c/:4:2","tags":null,"title":"在Linux系统上部署xll Job分布式任务调度平台","uri":"/2023/3815816a4666463c/"},{"categories":null,"content":"编译 mvn package 编译后生成 2 个 jar 包： ./xxl-job/xxl-job-admin/target/xxl-job-admin-2.4.1-SNAPSHOT.jar ./xxl-job/xxl-job-executor-samples/xxl-job-executor-sample-springboot/target/xxl-job-executor-sample-springboot-2.4.1-SNAPSHOT.jar 运行 jar 包： nohup java -jar xxl-job-admin-2.4.1-SNAPSHOT.jar \u0026 \u0026\u003e /dev/null nohup java -jar xxl-job-executor-sample-springboot-2.4.1-SNAPSHOT.jar \u0026 \u0026\u003e /dev/null ","date":"2023-09-21","objectID":"/2023/3815816a4666463c/:4:3","tags":null,"title":"在Linux系统上部署xll Job分布式任务调度平台","uri":"/2023/3815816a4666463c/"},{"categories":null,"content":"测试验证 浏览器输入：http://localhost:ServerPort/xxl-job-admin 默认登录账号为“admin/123456”： ","date":"2023-09-21","objectID":"/2023/3815816a4666463c/:4:4","tags":null,"title":"在Linux系统上部署xll Job分布式任务调度平台","uri":"/2023/3815816a4666463c/"},{"categories":null,"content":"Python执行器添加 下载执行器文件： git clone https://github.com/skyfyl/xxl-job-executor-sample-springboot.git 修改admin配置地址后，docker部署： # 本地编译docker容器或docker pull kobedocker24/xxl-job-executor-sample-springboot docker build -t xxl-job-executor-sample-springboot:2.2.0 . docker run -p 8401:8401 -p 8889:8889 -v /root/xxl-job/xxl-job-executor-sample-springboot-master/application.properties:/application.properties --name xxl-job-executor-sample-springboot -d xxl-job-executor-sample-springboot:2.2.0 添加执行器 ","date":"2023-09-21","objectID":"/2023/3815816a4666463c/:5:0","tags":null,"title":"在Linux系统上部署xll Job分布式任务调度平台","uri":"/2023/3815816a4666463c/"},{"categories":null,"content":" 在写这篇之前，尝试过利用fildder、charles、手机进行证书配置等工具或方法进行流量转发均以失败告终，不知道是不是Mac的原因还是因为WX的接口策略发生了改变导致抓到的数据包都是乱码，无法进一步利用。本文尝试利用Proxyman进行测试。 ","date":"2023-09-05","objectID":"/2023/f0333baedce38442/:0:0","tags":null,"title":"Mac下WX小程序包记录","uri":"/2023/f0333baedce38442/"},{"categories":null,"content":"工具介绍 Proxyman是一个原生的高性能macOS端的抓包工具，它使开发或测试人员能够轻松地捕获、检查和操作HTTP或HTTPS请求/响应。 下载地址：https://proxyman.io 官方文档：https://docs.proxyman.io ","date":"2023-09-05","objectID":"/2023/f0333baedce38442/:1:0","tags":null,"title":"Mac下WX小程序包记录","uri":"/2023/f0333baedce38442/"},{"categories":null,"content":"配置代理 这里记录配置代理转发利用BP进行抓包测试 配置相关代理信息需要和BP的代理信息一致 ","date":"2023-09-05","objectID":"/2023/f0333baedce38442/:2:0","tags":null,"title":"Mac下WX小程序包记录","uri":"/2023/f0333baedce38442/"},{"categories":null,"content":"Proxyman请求转代码 算了，结束了，同样存在抓不到数据包情况 ","date":"2023-09-05","objectID":"/2023/f0333baedce38442/:3:0","tags":null,"title":"Mac下WX小程序包记录","uri":"/2023/f0333baedce38442/"},{"categories":null,"content":"准备工作 弃用了下载资源包内容，现在只需docker-compose.yml和appsettings.json文件即可 安装好docker和docker-compose ","date":"2023-08-28","objectID":"/2023/4bb4b276170514a2/:1:0","tags":null,"title":"GZ::CTF平台搭建记录","uri":"/2023/4bb4b276170514a2/"},{"categories":null,"content":"端口暴露范围 这里可设置也可以不设置，如果是云服务器的还是推荐设置，内网的话无所谓 sudo nano /etc/sysctl.conf 添加如下内容，指定 ip_local_port_range： net.ipv4.ip_local_port_range = 20000 50000 执行 sudo sysctl -p使配置生效，重启Docker服务 ","date":"2023-08-28","objectID":"/2023/4bb4b276170514a2/:2:0","tags":null,"title":"GZ::CTF平台搭建记录","uri":"/2023/4bb4b276170514a2/"},{"categories":null,"content":"搭建及配置记录 在同一个文件夹(GZCTF)下新建两个文件：appsettings.json和docker-compose.yml ","date":"2023-08-28","objectID":"/2023/4bb4b276170514a2/:3:0","tags":null,"title":"GZ::CTF平台搭建记录","uri":"/2023/4bb4b276170514a2/"},{"categories":null,"content":"配置appsettings.json文件 在appsettings.json文件内写入如下内容： { \"AllowedHosts\": \"*\", \"ConnectionStrings\": { \"Database\": \"Host=db:5432;Database=gzctf;Username=postgres;Password=\u003cString1\u003e\" //\u003cString1\u003e换成数据库密码，随机密码且长度足够 }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\" } }, //邮箱配置 \"EmailConfig\": { \"SendMailAddress\": \"Admin@xxx.com\", // 填入邮箱 \"UserName\": \"ctf_noreply\", // 发件人名称 \"Password\": \"UWPTINWMFPQVMPAH\", // 邮箱密码，部分服务商需要填入授权码 \"Smtp\": { \"Host\": \"smtp.163.com\", // 此处为163邮箱服务器，具体自定 \"Port\": 465 } }, \"XorKey\": \"\u003cString2\u003e\", // 自定XorKey \"ContainerProvider\": { \"Type\": \"Docker\", \"PublicEntry\": \"xx.xx.xx.xx\", // 域名或IP配置，用于容器生成,域名不带http/https \"DockerConfig\": { \"SwarmMode\": false, \"Uri\": \"\" // 本地配置Docker因此此处置空 } }, \"RequestLogging\": false, \"DisableRateLimit\": false, \"RegistryConfig\": { \"UserName\": \"\", \"Password\": \"\", \"ServerAddress\": \"\" }, //谷歌验证码配置 \"GoogleRecaptcha\": { \"VerifyAPIAddress\": \"https://www.recaptcha.net/recaptcha/api/siteverify\", \"Sitekey\": \"\", \"Secretkey\": \"\", \"RecaptchaThreshold\": \"0.5\" } } ","date":"2023-08-28","objectID":"/2023/4bb4b276170514a2/:3:1","tags":null,"title":"GZ::CTF平台搭建记录","uri":"/2023/4bb4b276170514a2/"},{"categories":null,"content":"配置docker-compose.yml文件 version: '3.0' services: gzctf: image: gztime/gzctf:latest restart: always environment: - \"GZCTF_ADMIN_PASSWORD=\u003cString3\u003e\" # \u003cString3\u003e换成管理员账户密码，账号为Admin ports: - \"80:80\" # 对外端口号，前为外部端口。 networks: default: volumes: - \"./data/files:/app/uploads\" - \"./appsettings.json:/app/appsettings.json:ro\" - \"./logs:/app/log\" - \"./data/keys:/root/.aspnet/DataProtection-Keys\" # - \"./k8sconfig.yaml:/app/k8sconfig.yaml:ro\" - \"/var/run/docker.sock:/var/run/docker.sock\" depends_on: - db db: image: postgres:alpine restart: always environment: - \"POSTGRES_PASSWORD=\u003cString1\u003e\" # 数据库密码，务必要和appsettings.json中的配置一致 networks: default: volumes: - \"./data/db:/var/lib/postgresql/data\" networks: default: driver: bridge ipam: config: - subnet: 192.168.12.0/24 ","date":"2023-08-28","objectID":"/2023/4bb4b276170514a2/:3:2","tags":null,"title":"GZ::CTF平台搭建记录","uri":"/2023/4bb4b276170514a2/"},{"categories":null,"content":"部署及测试记录 将配置文件上传至服务器后，通过docker进行部署 cd GZCTF docker-compose up -d 部署完成后查看Logs，看部署是否成功 主要是看GZCTF容器是否连接上了数据库 查看容器ID： docker ps -a 这里可以看到GZCTF的ID，然后再通过如下命令查看日志 docker logs ID 看到连接上数据库的日志即可成功配置，接下来就可以对平台进行测试 登录域名或IP（域名需要在域名服务商配置），用Admin和前面设置的密码登录 ","date":"2023-08-28","objectID":"/2023/4bb4b276170514a2/:3:3","tags":null,"title":"GZ::CTF平台搭建记录","uri":"/2023/4bb4b276170514a2/"},{"categories":null,"content":"报错及修改记录 ","date":"2023-08-28","objectID":"/2023/4bb4b276170514a2/:4:0","tags":null,"title":"GZ::CTF平台搭建记录","uri":"/2023/4bb4b276170514a2/"},{"categories":null,"content":"将当前用户加入docker组 若出现如下报错需执行此过程 [xxxx@xxxx ~]$ docker ps Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json\": dial unix /var/run/docker.sock: connect: permission denied 问题出在用户为访问/var/run/docker.sock的权限，只需给用户增加权限即可。命令行输入： sudo chown root:docker /var/run/docker.sock # 修改docker.sock权限为root:docker sudo groupadd docker # 添加docker用户组 sudo gpasswd -a $USER docker # 将当前用户添加至docker用户组 newgrp docker # 更新docker用户组 ","date":"2023-08-28","objectID":"/2023/4bb4b276170514a2/:4:1","tags":null,"title":"GZ::CTF平台搭建记录","uri":"/2023/4bb4b276170514a2/"},{"categories":null,"content":"修改管理员密码 进入数据库容器内进行连接 # 这是连接命令 psql postgres://username:password@host:port/dbname username：连接数据的用户名，默认值是postgres password：密码，默认值是postgres host：主机名，默认值是localhost port：端口，默认值是5432 dbname：要连接的数据库名，默认值是postgres 然后直接执行 UPDATE \"AspNetUsers\" SET \"Role\"=3 WHERE \"UserName\"='需要设置为管理员的用户名'; ","date":"2023-08-28","objectID":"/2023/4bb4b276170514a2/:4:2","tags":null,"title":"GZ::CTF平台搭建记录","uri":"/2023/4bb4b276170514a2/"},{"categories":null,"content":"HW ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:1:0","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"hard_web_1 题目内容：服务器开放了哪些端口，请按照端口大小顺序提交答案，并以英文逗号隔开(如服务器开放了80 81 82 83端口，则答案为80,81,82,83) 发现存在端口探测行为，发现80，888，8888端口存活 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:1:1","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"hard_web_2 服务器中根目录下的flag值是多少？ 追踪最后一个响应码为200的流量 设置显示格式为raw： b5c1fadbb7e28da08572486d8e6933a84c5144463f178b352c5bda71cff4e8ffe919f0f115a528ebfc4a79b03aea0e31cb22d460ada998c7657d4d0f1be71ffa 通过哥斯拉流量解码得到flag import gzip import binascii from Crypto.Cipher import AES def ungzip(data): return gzip.decompress(data) def decode(data, key): cipher = AES.new(key, AES.MODE_ECB) de_data = cipher.decrypt(binascii.a2b_hex(data)) print(ungzip(de_data.strip(chr(de_data[-1]).encode()))) if __name__ == '__main__': key = b'748007e861908c03' data = 'b5c1fadbb7e28da08572486d8e6933a84c5144463f178b352c5bda71cff4e8ffe919f0f115a528ebfc4a79b03aea0e31cb22d460ada998c7657d4d0f1be71ffa' decode(data, key) ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:1:2","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"hard_web_3 该webshell的连接密码是多少？ 搜索pwd，找到test.jsp，请求了shell.jsp的文件，script中包含748007e861908c03，md5碰撞得到密码14mk3y import hashlib import itertools key = '1234567890abcdefghijklmnopqrstuvwxyz' for i in itertools.product(key, repeat=6): res =''.join(i) flag = hashlib.md5(res.encode()).hexdigest() if flag[:16] == '748007e861908c03': print(res) break ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:1:3","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"SS ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:2:0","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"sevrer save_1 黑客是使用什么漏洞来拿下root权限的。格式为：CVE-2020-114514 pom.xml源码包，发现是Spring4Shell Vulnerable Application的框架 google直接搜就有CVE编号 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:2:1","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"sevrer save_2 黑客反弹shell的ip和端口是什么，格式为：10.0.0.1:4444 bbbb.sh文件中有 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:2:2","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"sevrer save_3 黑客的病毒名称是什么？ 格式为：filename home目录下guests用户中 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:2:3","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"sevrer save_4 黑客的病毒运行后创建了什么用户？请将回答用户名与密码：username:password etc/shadow文件直接查看 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:2:4","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"sevrer save_5 服务器在被入侵时外网ip是多少? 格式为：10.10.0.1 guests目录下隐藏日志文件中 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:2:5","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"sevrer save_6 病毒运行后释放了什么文件？格式：文件1,文件2 .idea目录下存在俩个文件 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:2:6","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"sevrer save_7 矿池地址是什么？ 格式：domain:1234 同上mine_doge.sh中有 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:2:7","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"sevrer save_8 黑客的钱包地址是多少？格式：xx:xxxxxxxx 同上mine_doge.sh中有 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:2:8","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"WS ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:3:0","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"Wireshark1_1 入侵主机IP是？ 查看wireshark包，发现交互频繁的目标ip ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:3:1","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"Wireshark1_2 被入侵主机的口令是？ 追踪tcp流，发现password ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:3:2","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"Wireshark1_3 用户目录下第二个文件夹的名称是？ 追踪tcp流，发现ls命令，找到文件目录 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:3:3","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"Wireshark1_4 /etc/passwd中倒数第二个用户的用户名是？ 找到最后etc/passwd文件返回值，找到倒数第二个用户名mysql ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:3:4","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"SSW ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:4:0","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"SmallSwrod_1 连接蚁剑的正确密码是__?（答案示例：123asd） 追踪tcp流，根据蚁剑的特征ini_set查找蚁剑的流，第一个变量名就是密码。 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:4:1","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"SmallSwrod_2 攻击者留存的值是__?(答案示例：d1c3f0d3-68bb-4d85-a337-fb97cf99ee2e) 追踪tcp流，根据蚁剑的特征ini_set查找蚁剑的流，一个个找，找到一个base64字符串，解码后长得跟题目给的提示很像，提交成功。 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:4:2","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"EW ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:5:0","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"ez_web_1 服务器自带的后门文件名是什么？（含文件后缀） 追踪tcp流，查到ViewMore.php存在任意文件上传漏洞，被上传了一个d00r.php的文件。 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:5:1","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"ez_web_2 服务器的内网IP是多少？ 根据第一题中找到的d00r.php木马文件，查找该木马流量，追踪http流，找到内网地址。 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:5:2","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"ez_web_3 攻击者往服务器中写入的key是什么？ 根据第一题中找到的d00r.php木马文件，查找该木马流量，追踪http流，找到内网地址。 解码 利用得到的密码进行加压 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:5:3","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"TP ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:6:0","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"tcpdump_1 攻击者通过暴力破解进入了某Wiki 文档，请给出登录的用户名与密码 提示暴力破解，找到login的请求，一个个翻，翻出登录成功的账号密码。 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:6:1","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"tcpdump_2 攻击者发现软件存在越权漏洞，请给出攻击者越权使用的cookie的内容的md5值。（32位小写） 找到uid=1，响应码为200的流量将cookie加密即可 import hashlib key = 'accessToken=f412d3a0378d42439ee016b06ef3330c; zyplayertoken=f412d3a0378d42439ee016b06ef3330cQzw=; userid=1' print(hashlib.md5(key.encode()).hexdigest()) ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:6:2","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"tcpdump_5 给出攻击者获取系统权限后，下载的工具的名称，比如nmap 数据包在验证成功后开始执行命令 发现利用curl下载fscan行为 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:6:3","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"HD ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:7:0","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"hacked_1 题目内容：admIn用户的密码是什么？ 数据包中发现username和password加密js源码 中间很多失败的账户和admin账户进行迷惑，直到发现admIn用户显示登录成功 追踪数据流发现密码：KGM7NI0%2FWvKswK%2BPlmFIhO4gqe8jJzRdOi02GQ0wZoo%3D 结合js加密规则进行解密得到admIn的密码 rom Crypto.Cipher import AES from Crypto.Util.Padding import unpad from base64 import b64decode def decrypt(encrypted_text, key, iv): # 因为加密时使用的是Base64，所以解密前需要先进行Base64解码 encrypted_text = b64decode(encrypted_text) # 创建一个新的cipher对象用于AES解密 cipher = AES.new(key, AES.MODE_CBC, iv) # 解密 decrypted_text = cipher.decrypt(encrypted_text) # 解密后的结果可能包含无效的填充，所以需要去掉填充 decrypted_text = unpad(decrypted_text, AES.block_size) # 最后，将解密后的结果转换回字符串 return decrypted_text.decode('utf-8') crypt_key = 'l36DoqKUYQP0N7e1' crypt_iv = '131b0c8a7a6e072e' key = crypt_key.encode('utf-8') iv = crypt_iv.encode('utf-8') # 这里需要替换成你需要解密的内容 encrypted_text = 'KGM7NI0/WvKswK+PlmFIhO4gqe8jJzRdOi02GQ0wZoo=' print(decrypt(encrypted_text, key, iv)) ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:7:1","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"hacked_2 app.config[‘SECRET_KEY’]值为多少？ 往下找到读取配置文件的数据包 解码得到KEY的值 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:7:2","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"hacked_3 flask网站由哪个用户启动？ 追踪数据包发现打印hello但未显示用户，结合之前的数据包结果此处可能存在疑点 将session解密得到用户名 ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:7:3","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"hacked_4 攻击者写入的内存马的路由名叫什么？（答案里不需要加/） 往下继续追踪数据发现Index，响应为hello ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:7:4","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"BF ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:8:0","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"baby_forensics_1 vol读取内存文件后导出 文本编辑器打开得到编码 ROT47解码得到flag ","date":"2023-08-27","objectID":"/2023/e99e39120ce2bb15/:8:1","tags":null,"title":"2023年第二届陇剑杯部分题解","uri":"/2023/e99e39120ce2bb15/"},{"categories":null,"content":"博客搭建 brew一键安装hugo brew install hugo hugo version 安装之后创建博客站点 hugo new site 404p3rs0n 创建后下载主题放到themes文件夹下，在hugo.toml中添加主题 或直接指定参数在本地进行测试 hugo server -t LoveIt --buildDrafts 配置成功后，将主题目录下exampleSite的配置文件复制到根目录下，将config.toml的内容复制到hugo.toml中，然后上传github仓库，如果出现鉴权失败 注：创建的Github仓库需要以username.github.io格式命名，且仓库属性为Public。 在github中setting中找到Developer setting创建tokens，然后在push的时候输入密码时输入token就可以了 上传到github仓库后，如下图进行Deploy之后Github-pages功能即可使用 部署完成之后将仓库拉取到本地进行同步，以免丢失.github文件夹中的内容导致文章上传之后不能更新的问题 git pull origin master 在进行上传之后会自动执行Actions ","date":"2023-08-19","objectID":"/2023/4b5d11cde79359c1/:1:0","tags":null,"title":"LoveIt主题博客搭建指北","uri":"/2023/4b5d11cde79359c1/"},{"categories":null,"content":"图床设置 在Github上新建一个Public属性的仓库用来存放图片 用之前生成的Token配置PicGo访问Github上传图片 配置成功之后即可上传图片至Github仓库 这里还是建议使用图床对图片进行保存，不影响图片加载速度和图片安全性。 ","date":"2023-08-19","objectID":"/2023/4b5d11cde79359c1/:2:0","tags":null,"title":"LoveIt主题博客搭建指北","uri":"/2023/4b5d11cde79359c1/"},{"categories":null,"content":"一键上传 苦于一次次执行git，才有了这个脚本，python执行即可 python GitPush.py ","date":"2023-08-19","objectID":"/2023/4b5d11cde79359c1/:3:0","tags":null,"title":"LoveIt主题博客搭建指北","uri":"/2023/4b5d11cde79359c1/"},{"categories":null,"content":"Posts实现md5加密 苦于文章Title为中文时，Posts经url转换后会很长，于是自定义slug为Title的md5值 修改文章模版 archetypes/default.md，在Front-matter中添加slug字段，新建文章时将文章创建时间和标题进行md5加密，从第0位取到第16位作为slug slug: {{ substr (md5 (printf \"%s%s\" .Date (replace .TranslationBaseName \"-\" \" \" | title))) 0 16 }} 在网站配置 hugo.toml 中添加文章永久链接选项 permalinks: posts = \":year/:month/:slug\" ","date":"2023-08-19","objectID":"/2023/4b5d11cde79359c1/:4:0","tags":null,"title":"LoveIt主题博客搭建指北","uri":"/2023/4b5d11cde79359c1/"}]